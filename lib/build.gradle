def scalaVersion = '2.12.8'

// Global Configuration for Scala Projects
configure([project(':com.dsleng.model'),project('com.dsleng.twitter'),project('com.dsleng.test'),project('com.dsleng.emo'),project('com.dsleng.server'),project('com.dsleng.store'),project('com.dsleng.server.nlp')]) {

	apply plugin: 'scala'
	apply plugin: 'eclipse'
	apply plugin: "maven"
        apply plugin: 'maven-publish'

	group = "com.dsleng"
	version = "1.0"
	
	repositories{
	    maven {
   		name 'lucene-snapshots'
    		url 'https://s3.amazonaws.com/download.elasticsearch.org/lucenesnapshots/83f9835'
	    }
	    mavenLocal()
	   ivy {
        	url "${System.properties['user.home']}/.ivy2/local"
	    }
	    mavenCentral()
	}
	
	dependencies{
	    compile "org.scala-lang:scala-library:${scalaVersion}"
    
	    compileOnly group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.2'
	    //annotationProcessor group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'
  		compileOnly group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'
  		//annotationProcessor group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1'
  		compile group: 'org.apache.logging.log4j', name: 'log4j-api-scala_2.12', version: '11.0'
	    testCompile "junit:junit:4.11"
	}
	compileJava {
    	options.compilerArgs += '-proc:none'
	}
	task wrapper(type: Wrapper) {
   		gradleVersion = '5.4.1' //version required
	}
    /*
	configurations.all {
	    resolutionStrategy.force "org.scala-lang:scala-library:2.12.3"
	    exclude group: 'org.slf4j', module: 'slf4j-simple'
	    exclude group: 'org.slf4j', module: 'slf4j-log4j2'
	}
    */
    clean.doLast {
        file('./bin/').deleteDir()
    }
    publishing {
    publications {
        myLibrary(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            name = 'myRepo'
            url = "file://${buildDir}/repo"
        }
    }
    }
    tasks.eclipseProject.mustRunAfter tasks.cleanEclipseProject
    tasks.matching { it.name == 'eclipseClasspath' }.all {
    	it.mustRunAfter { tasks.cleanEclipseClasspath }
    }
    tasks.matching { it.name == 'eclipse' }.all {
     	it.mustRunAfter { tasks.cleanEclipse }
    }

}
// Global Configuration for Java Projects
configure([project(':com.dsleng.nlp'),project(':com.dsleng.testj')]) {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: "maven"
    apply plugin: 'maven-publish'

	group = "com.dsleng"
	version = "1.0"
	
	repositories{
	    mavenLocal()
	    mavenCentral()
	}
	
	compileJava {
    	options.compilerArgs += '-proc:none'
	}
	task wrapper(type: Wrapper) {
   		gradleVersion = '5.4.1' //version required
	}
   	dependencies {
		compileOnly group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.2'
	    //annotationProcessor group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'
  		compileOnly group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'
  		//annotationProcessor group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1'
	}
    clean.doLast {
        file('./bin/').deleteDir()
    }
    publishing {
    publications {
        myLibrary(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            name = 'myRepo'
            url = "file://${buildDir}/repo"
        }
    }
}
  tasks.eclipseProject.mustRunAfter tasks.cleanEclipseProject
  tasks.matching { it.name == 'eclipseClasspath' }.all {
    it.mustRunAfter { tasks.cleanEclipseClasspath }
  }
  tasks.matching { it.name == 'eclipseJdt' }.all {
    it.mustRunAfter { tasks.cleanEclipseJdt }
  }
}



